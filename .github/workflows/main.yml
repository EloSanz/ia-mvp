name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  validate-branch-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch rules
        run: |
          echo "⚠️ Verificando reglas de branches..."
          if [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" != "develop" ]]; then
            echo "❌ Las PRs a 'main' solo pueden venir desde 'develop'"
            exit 1
          fi
          if [[ "${{ github.head_ref }}" =~ ^(feature|bugfix|hotfix)/ ]]; then
            echo "✅ Nomenclatura de rama correcta"
          else
            echo "❌ Las ramas deben seguir el patrón: feature/*, bugfix/*, hotfix/*"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [web, server]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci
      
      - name: Run ESLint
        working-directory: ./${{ matrix.project }}
        run: npm run lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [web, server]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci
      
      - name: Run tests
        working-directory: ./${{ matrix.project }}
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          NODE_ENV: test
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [web, server]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci
      
      - name: Build
        working-directory: ./${{ matrix.project }}
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-build
          path: ${{ matrix.project }}/dist

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging
        run: echo "🚀 Deploying to staging..."

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to production
        run: echo "🚀 Deploying to production..."
