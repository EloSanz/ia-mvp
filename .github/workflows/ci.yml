name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: Backend Coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci

    - name: Create test environment file
      working-directory: ./server
      run: |
        echo "NODE_ENV=test" > .env
        echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/testdb" >> .env
        echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env
        echo "OPENAI_API_KEY=test_key" >> .env

    - name: Run database migrations
      working-directory: ./server
      run: npx prisma migrate deploy

    - name: Run integration tests
      working-directory: ./server
      run: npm run test:integration

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci

    - name: Run backend linting
      working-directory: ./server
      run: npm run lint

    - name: Check formatting
      working-directory: ./server
      run: npm run format -- --check

    - name: Run type checking (if applicable)
      working-directory: ./web
      run: npm run build --if-present
